#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 80000

void llenaArregloRandom(int nums[], int n);
void copiarArreglo(int origen[], int destino[], int n);
void swap(int *a, int *b);
void burbuja(int nums[], int n);
void baraja(int nums[], int n);
void seleccion(int nums[], int n);
int particion(int nums[], int inf, int sup);
void quicksort(int nums[], int inf, int sup);

int main() {
    int numeros[N];
    int copia1[N], copia2[N], copia3[N], copia4[N];
    clock_t inicio, fin;
    double tiempo;
    time_t inicioReal, finReal;

    srand(time(NULL));
    llenaArregloRandom(numeros, N);

    copiarArreglo(numeros, copia1, N);
    copiarArreglo(numeros, copia2, N);
    copiarArreglo(numeros, copia3, N);
    copiarArreglo(numeros, copia4, N);

    inicioReal = time(NULL);

    printf("\nCuanto tiempo tardan los algoritmos de ordenacion...\n");

    inicio = clock();
    burbuja(copia1, N);
    fin = clock();
    tiempo = (double)(fin - inicio) / CLOCKS_PER_SEC;
    printf("Burbuja termino en: %.2f segundos\n", tiempo);

    inicio = clock();
    baraja(copia2, N);
    fin = clock();
    tiempo = (double)(fin - inicio) / CLOCKS_PER_SEC;
    printf("Baraja termino en: %.2f segundos\n", tiempo);

    inicio = clock();
    seleccion(copia3, N);
    fin = clock();
    tiempo = (double)(fin - inicio) / CLOCKS_PER_SEC;
    printf("Selecci√≥n termino en: %.2f segundos\n", tiempo);

    inicio = clock();
    quicksort(copia4, 0, N - 1);
    fin = clock();
    tiempo = (double)(fin - inicio) / CLOCKS_PER_SEC;
    printf("Quicksort termino en: %.2f segundos\n", tiempo);

    finReal = time(NULL);
    printf("\n Tiempo total transcurrido: %.0f segundos\n\n", difftime(finReal, inicioReal));

    return 0;
}


void llenaArregloRandom(int nums[], int n) {
    for (int i = 0; i < n; i++) {
        nums[i] = rand() % 1000000;
    }
}

void copiarArreglo(int origen[], int destino[], int n) {
    for (int i = 0; i < n; i++) {
        destino[i] = origen[i];
    }
}

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void burbuja(int nums[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - 1 - i; j++) {
            if (nums[j] > nums[j + 1]) {
                swap(&nums[j], &nums[j + 1]);
            }
        }
    }
}

void baraja(int nums[], int n) {
    int clave, j;
    for (int i = 1; i < n; i++) {
        clave = nums[i];
        j = i - 1;
        while (j >= 0 && nums[j] > clave) {
            nums[j + 1] = nums[j];
            j--;
        }
        nums[j + 1] = clave;
    }
}

void seleccion(int nums[], int n) {
    int min;
    for (int i = 0; i < n - 1; i++) {
        min = i;
        for (int j = i + 1; j < n; j++) {
            if (nums[j] < nums[min]) {
                min = j;
            }
        }
        swap(&nums[i], &nums[min]);
    }
}

int particion(int nums[], int inf, int sup) {
    int pivote = nums[sup];
    int i = inf - 1;
    for (int j = inf; j < sup; j++) {
        if (nums[j] <= pivote) {
            i++;
            swap(&nums[i], &nums[j]);
        }
    }
    swap(&nums[i + 1], &nums[sup]);
    return i + 1;
}

void quicksort(int nums[], int inf, int sup) {
    if (inf < sup) {
        int p = particion(nums, inf, sup);
        quicksort(nums, inf, p - 1);
        quicksort(nums, p + 1, sup);
    }
}

void qs(int nums[N], int inf, int sup){
    int p;
    if(inf < sup){
        p = particion(nums, inf, sup);
        qs(nums, inf, p -1);
        qs(nums, p +1, sup);
    }
}
int particion(int nums[N], int inf, int sup){
    int piv = nums[sup];
    int i = inf - 1;
    int aux;
    for(int j = inf, j < sup; j ++){
        if(nums[j] < piv){
            i ++;
            swap(&nums[i], &nums[j]);
        }
    }
    swap(&nums[sup], &nums[i + 1]);
}


