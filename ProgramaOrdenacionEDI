// Tomar el tiempo de los algoritmos: Burbuja, Baraja, Seleccion
// Llenar un arreglo con datos random
//Documentar el proceso en un PDF, Analisis de tiempo en los 3 algoritmos, Que algoritmo me parece mejor, Captura de pantalla de las 3 ejecuciones

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 100000

// Prototipos de funciones
void llenaArregloRandom(int nums[N], int n);
void copiarArreglo(int origen[N], int destino[N], int n);
void swap(int *n1, int *n2);
void burbuja(int nums[N], int n);
void baraja(int nums[N], int n);
void seleccion(int nums[N], int n);
void menu();

int main() {
    menu();
    return 0;
}

// --- Función de menú ---
void menu() {
    int opcion;
    int numeros[N], copia[N];
    clock_t inicio, fin;
    double tiempoTranscurrido;

    srand(time(NULL)); // Semilla para rand()
    llenaArregloRandom(numeros, N);

    printf("\n===== MENÚ DE ORDENAMIENTO =====\n");
    printf("1. Ordenamiento Burbuja\n");
    printf("2. Ordenamiento Baraja (Inserción)\n");
    printf("3. Ordenamiento Selección\n");
    printf("4. Salir\n");
    printf("Seleccione una opción: ");
    scanf("%d", &opcion);

    copiarArreglo(numeros, copia, N);

    switch (opcion) {
        case 1:
            inicio = clock();
            burbuja(copia, N);
            fin = clock();
            tiempoTranscurrido = (double)(fin - inicio) / CLOCKS_PER_SEC;
            printf("\nTiempo transcurrido (Burbuja): %.2f segundos\n", tiempoTranscurrido);
            break;

        case 2:
            inicio = clock();
            baraja(copia, N);
            fin = clock();
            tiempoTranscurrido = (double)(fin - inicio) / CLOCKS_PER_SEC;
            printf("\nTiempo transcurrido (Baraja / Inserción): %.2f segundos\n", tiempoTranscurrido);
            break;

        case 3:
            inicio = clock();
            seleccion(copia, N);
            fin = clock();
            tiempoTranscurrido = (double)(fin - inicio) / CLOCKS_PER_SEC;
            printf("\nTiempo transcurrido (Selección): %.2f segundos\n", tiempoTranscurrido);
            break;

        case 4:
            printf("\nSaliendo del programa...\n");
            exit(0);

        default:
            printf("\nOpción no válida.\n");
            break;
    }
}

// --- Funciones auxiliares ---
void llenaArregloRandom(int nums[N], int n) {
    for (int i = 0; i < n; i++) {
        nums[i] = rand();
    }
}

void copiarArreglo(int origen[N], int destino[N], int n) {
    for (int i = 0; i < n; i++) {
        destino[i] = origen[i];
    }
}

void swap(int *n1, int *n2) {
    int aux = *n1;
    *n1 = *n2;
    *n2 = aux;
}

// --- Ordenamiento Burbuja ---
void burbuja(int nums[N], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - 1 - i; j++) {
            if (nums[j] > nums[j + 1]) {
                swap(&nums[j], &nums[j + 1]);
            }
        }
    }
}

// --- Ordenamiento Baraja (Inserción) ---
void baraja(int nums[N], int n) {
    int clave, j;
    for (int i = 1; i < n; i++) {
        clave = nums[i];
        j = i - 1;
        while (j >= 0 && nums[j] > clave) {
            nums[j + 1] = nums[j];
            j--;
        }
        nums[j + 1] = clave;
    }
}

// --- Ordenamiento Selección ---
void seleccion(int nums[N], int n) {
    int min;
    for (int i = 0; i < n - 1; i++) {
        min = i;
        for (int j = i + 1; j < n; j++) {
            if (nums[j] < nums[min]) {
                min = j;
            }
        }
        swap(&nums[i], &nums[min]);
    }
}

void qs(int nums[N], int inf, int sup){
    int p;
    if(inf < sup){
        p = particion(nums, inf, sup);
        qs(nums, inf, p -1);
        qs(nums, p +1, sup);
    }
}
int particion(int nums[N], int inf, int sup){
    int piv = nums[sup];
    int i = inf - 1;
    int aux;
    for(int j = inf, j < sup; j ++){
        if(nums[j] < piv){
            i ++;
            swap(&nums[i], &nums[j]);
        }
    }
    swap(&nums[sup], &nums[i + 1]);
}


